<<<<<<< HEAD
### Appendix: Local exception trace (redacted)
Traceback (most recent call last):
  File "fuzz_plist.py", line 78, in run_test
    parsed = json.loads(mutated_input)
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

Note: reproduced locally with sample ID sample1.json. Full mutated input saved privately for triage.
=======
### Appendix: Representative exception traces (redacted)

**1)** `JSONDecodeError: Expecting value: line 1 column 1 (char 0)`
Observed repeatedly across many iterations. Interpretation: the mutated sample began with no valid JSON token (empty or whitespace). Reproducible locally; mutated inputs saved privately.

**2)** `JSONDecodeError: Extra data: line 1 column 2 (char 1)`
Indicates multiple top-level JSON values or trailing non-JSON data after the first valid JSON value. Useful to test parser boundary handling and to craft minimal PoC inputs.

**3)** `JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)`
Shows mutated input produced unquoted keys or syntax errors; suggests parser strictness that can be exercised for further fuzzing.

---

Notes:

* Stack traces have been redacted to avoid publishing raw mutated inputs or payloads.
* Full mutated inputs that caused these exceptions are stored locally in `crash_samples/` (private) for triage and PoC development.
>>>>>>> 2f1e700 (docs: add fuzz harness summary and representative exception appendix)
